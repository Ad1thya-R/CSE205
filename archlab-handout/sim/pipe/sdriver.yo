                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f63804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # name = Adithya Ravichandran
                            | # id =
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
0x032: 6300                 |     xorq %rax,%rax		# count = 0;
0x034: c0f2f6ffffffffffffff |     iaddq $-10, %rdx 	# len < 0
0x03e: 720802000000000000   |     jl Check2			# if so, goto Check2:
0x047:                      | MainLoop:
0x047: 50a70000000000000000 |     mrmovq (%rdi), %r10		# read val from src...
0x051: 50b70800000000000000 |     mrmovq 8(%rdi), %r11	# read val from src...
0x05b: 50c71000000000000000 |     mrmovq 16(%rdi), %r12	# read val from src...
0x065: 50d71800000000000000 |     mrmovq 24(%rdi), %r13	# read val from src...
0x06f: 50e72000000000000000 |     mrmovq 32(%rdi), %r14	# read val from src...
0x079: 50872800000000000000 |     mrmovq 40(%rdi), %r8	# read val from src...
0x083: 50973000000000000000 |     mrmovq 48(%rdi), %r9	# read val from src...
0x08d: 50373800000000000000 |     mrmovq 56(%rdi), %rbx	# read val from src...
0x097: 50174000000000000000 |     mrmovq 64(%rdi), %rcx	# read val from src...
0x0a1: 50574800000000000000 |     mrmovq 72(%rdi), %rbp	# read val from src...
0x0ab: 40a60000000000000000 |     rmmovq %r10, (%rsi)		# ...and store it to dst
0x0b5: 40b60800000000000000 |     rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x0bf: 40c61000000000000000 |     rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x0c9: 40d61800000000000000 |     rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x0d3: 40e62000000000000000 |     rmmovq %r14, 32(%rsi)	# ...and store it to dst
0x0dd: 40862800000000000000 |     rmmovq %r8, 40(%rsi)	# ...and store it to dst
0x0e7: 40963000000000000000 |     rmmovq %r9, 48(%rsi)	# ...and store it to dst
0x0f1: 40363800000000000000 |     rmmovq %rbx, 56(%rsi)	# ...and store it to dst
0x0fb: 40164000000000000000 |     rmmovq %rcx, 64(%rsi)	# ...and store it to dst
0x105: 40564800000000000000 |     rmmovq %rbp, 72(%rsi)	# ...and store it to dst
                            | 
0x10f: 62aa                 | E1:  andq %r10, %r10			# val <= 0?
0x111: 712401000000000000   |         jle E2				# if so, goto E2:
0x11a: c0f00100000000000000 |         iaddq $1, %rax			# count++
                            | 
0x124: 62bb                 | E2:	andq %r11, %r11			# val <= 0?
0x126: 713901000000000000   |         jle E3				# if so, goto E3:
0x12f: c0f00100000000000000 |         iaddq $1, %rax			# count++
                            | 
0x139: 62cc                 | E3:	andq %r12, %r12			# val <= 0?
0x13b: 714e01000000000000   |         jle E4				# if so, goto E4:
0x144: c0f00100000000000000 |         iaddq $1, %rax			# count++
                            | 
0x14e: 62dd                 | E4:	andq %r13, %r13			# val <= 0?
0x150: 716301000000000000   |         jle E5				# if so, goto E5:
0x159: c0f00100000000000000 |         iaddq $1, %rax			# count++
                            | 
0x163: 62ee                 | E5:	andq %r14, %r14			# val <= 0?
0x165: 717801000000000000   |         jle E6				# if so, goto E6:
0x16e: c0f00100000000000000 |         iaddq $1, %rax			# count++
                            | 
0x178: 6288                 | E6:	andq %r8, %r8			# val <= 0?
0x17a: 718d01000000000000   |         jle E7				# if so, goto E7:
0x183: c0f00100000000000000 |         iaddq $1, %rax			# count++
                            | 
0x18d: 6299                 | E7:	andq %r9, %r9			# val <= 0?
0x18f: 71a201000000000000   |         jle E8				# if so, goto E8:
0x198: c0f00100000000000000 |         iaddq $1, %rax			# count++
                            | 
0x1a2: 6233                 | E8:	andq %rbx, %rbx			# val <= 0?
0x1a4: 71b701000000000000   |         jle E9				# if so, goto E9:
0x1ad: c0f00100000000000000 |         iaddq $1, %rax			# count++
                            | 
0x1b7: 6211                 | E9:	andq %rcx, %rcx			# val <= 0?
0x1b9: 71cc01000000000000   |         jle E10				# if so, goto E10:
0x1c2: c0f00100000000000000 |         iaddq $1, %rax			# count++
                            | 
0x1cc: 6255                 | E10:	andq %rbp, %rbp			# val <= 0?
0x1ce: 71e101000000000000   |         jle Check				# if so, goto Check:
0x1d7: c0f00100000000000000 |         iaddq $1, %rax			# count++
                            | 
0x1e1: c0f75000000000000000 | Check:	iaddq $80, %rdi		# src+=10
0x1eb: c0f65000000000000000 |         iaddq $80, %rsi		# dst+=10
0x1f5: c0f2f6ffffffffffffff |         iaddq $-10, %rdx 	# len >= 0
0x1ff: 754700000000000000   |         jge MainLoop		# if so, goto MainLoop:
                            | 
0x208: c0f20500000000000000 | Check2: iaddq $5, %rdx		# fix length back & check for len
0x212: 720603000000000000   |         jl Manual			# if len < 0, goto Manual
                            | 
0x21b:                      | Loop2:
0x21b: 50a70000000000000000 |         mrmovq (%rdi), %r10		# read val from src...
0x225: 50b70800000000000000 |         mrmovq 8(%rdi), %r11	# read val from src...
0x22f: 50c71000000000000000 |         mrmovq 16(%rdi), %r12	# read val from src...
0x239: 50d71800000000000000 |         mrmovq 24(%rdi), %r13	# read val from src...
0x243: 50e72000000000000000 |         mrmovq 32(%rdi), %r14	# read val from src...
0x24d: 40a60000000000000000 |         rmmovq %r10, (%rsi)		# ...and store it to dst
0x257: 40b60800000000000000 |         rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x261: 40c61000000000000000 |         rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x26b: 40d61800000000000000 |         rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x275: 40e62000000000000000 |         rmmovq %r14, 32(%rsi)	# ...and store it to dst
                            | 
0x27f: 62aa                 | R1:	andq %r10, %r10			# val <= 0?
0x281: 719402000000000000   |     jle R2					# if so, goto R2:
0x28a: c0f00100000000000000 |     iaddq $1, %rax			# count++
                            | 
0x294: 62bb                 | R2:	andq %r11, %r11			# val <= 0?
0x296: 71a902000000000000   |     jle R3					# if so, goto R3:
0x29f: c0f00100000000000000 |     iaddq $1, %rax			# count++
                            | 
0x2a9: 62cc                 | R3:	andq %r12, %r12			# val <= 0?
0x2ab: 71be02000000000000   |     jle R4					# if so, goto R4:
0x2b4: c0f00100000000000000 |     iaddq $1, %rax			# count++
                            | 
0x2be: 62dd                 | R4:	andq %r13, %r13			# val <= 0?
0x2c0: 71d302000000000000   |     jle R5					# if so, goto R5:
0x2c9: c0f00100000000000000 |     iaddq $1, %rax			# count++
                            | 
0x2d3: 62ee                 | R5:	andq %r14, %r14			# val <= 0?
0x2d5: 71e802000000000000   |     jle EndLoop2			# if so, goto EndLoop2:
0x2de: c0f00100000000000000 |     iaddq $1, %rax			# count++
                            | 
0x2e8:                      | EndLoop2:
0x2e8: c0f72800000000000000 |     iaddq $40, %rdi		# src+=5
0x2f2: c0f62800000000000000 |     iaddq $40, %rsi		# dst+=5
0x2fc: c0f2fbffffffffffffff |     iaddq $-5, %rdx 	# len <= 0
                            | 
0x306:                      | Manual:
0x306: c0f20500000000000000 |         iaddq $5, %rdx		# fix length back
0x310: 761a03000000000000   |         jg L1				# if len > 0, add L1
0x319: 90                   |         ret
0x31a: 50a70000000000000000 | L1:	mrmovq (%rdi), %r10		# read val from src...
0x324: 40a60000000000000000 |     rmmovq %r10, (%rsi)		# ...and store it to dst
0x32e: 62aa                 |     andq %r10, %r10			# val <= 0?
0x330: 714303000000000000   |     jle C1					# if so, goto C1:
0x339: c0f00100000000000000 |     iaddq $1, %rax			# count++
                            | 
0x343: c0f2ffffffffffffffff | C1:	iaddq $-1, %rdx		# len--
0x34d: 765703000000000000   |     jg L2				# if so, go to L2:
0x356: 90                   |     ret
                            | 
0x357: 50a70800000000000000 | L2: mrmovq 8(%rdi), %r10	# read val from src...
0x361: 40a60800000000000000 |     rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x36b: 62aa                 |     andq %r10, %r10			# val <= 0?
0x36d: 718003000000000000   |     jle C2					# if so, goto C2:
0x376: c0f00100000000000000 |     iaddq $1, %rax			# count++
                            | 
0x380: c0f2ffffffffffffffff | C2: iaddq $-1, %rdx		# len--
0x38a: 769403000000000000   |     jg L3				# if so, go to L3:
0x393: 90                   |     ret
                            | 
0x394: 50a71000000000000000 | L3: mrmovq 16(%rdi), %r10	# read val from src...
0x39e: 40a61000000000000000 |     rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x3a8: 62aa                 |     andq %r10, %r10			# val <= 0?
0x3aa: 71bd03000000000000   |     jle C3				# if so, goto Done:
0x3b3: c0f00100000000000000 |     iaddq $1, %rax			# count++
                            | 
0x3bd: c0f2ffffffffffffffff | C3: iaddq $-1, %rdx		# len--
0x3c7: 76d103000000000000   |     jg L4				# if so, go to L3:
0x3d0: 90                   |     ret
                            | 
0x3d1: 50a71800000000000000 | L4: mrmovq 24(%rdi), %r10	# read val from src...
0x3db: 40a61800000000000000 |     rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x3e5: 62aa                 |     andq %r10, %r10			# val <= 0?
0x3e7: 71fa03000000000000   |     jle Done				# if so, goto Done:
0x3f0: c0f00100000000000000 |     iaddq $1, %rax			# count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3fa:                      | Done:
0x3fa: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3fb:                      | End:
                            | #/* $end ncopy-ys */
0x3fb:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x400:                      | 	.align 8
0x400:                      | src:
0x400: 0100000000000000     | 	.quad 1
0x408: feffffffffffffff     | 	.quad -2
0x410: 0300000000000000     | 	.quad 3
0x418: fcffffffffffffff     | 	.quad -4
0x420: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x430:                      | 	.align 16
0x430:                      | Predest:
0x430: fadebc0000000000     | 	.quad 0xbcdefa
0x438:                      | dest:
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458:                      | Postdest:
0x458: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x460:                      | .align 8
                            | # Run time stack
0x460: 0000000000000000     | 	.quad 0
0x468: 0000000000000000     | 	.quad 0
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
                            | 
0x4e0:                      | Stack:
