                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f68803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f75803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # name = Adithya Ravichandran
                            | # id = adithya.ravichandran
                            | # Describe how and why you modified the baseline code.
                            | # Loop unrolling helps us improve the efficiency. (less comparisons)
                            | # Instead of using resgisters, we use the iadddq function. (less operations)
                            | # We also read and write the elements together in the loops. (use of separate ALU's)
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 202b                 | 	rrmovq %rdx,%r11
0x034: c0fbf8ffffffffffffff | 	iaddq -8,%r11  # <2 ?
0x03e: 72c201000000000000   | 	jl Check_4		# if so, goto Loop2:
                            | 
0x047:                      | Sub_8:
0x047: c0f2f8ffffffffffffff | 	iaddq -8, %rdx		# len-=8
0x051: c0f74000000000000000 | 	iaddq $0x40, %rdi		# src+=8*8
0x05b: c0f64000000000000000 | 	iaddq $0x40, %rsi		# dst+=8*8
                            | 
0x065:                      | Loop_8:
0x065: 50a7f8ffffffffffffff | 	mrmovq -8(%rdi), %r10	# read val from src...
0x06f: 40a6f8ffffffffffffff | 	rmmovq %r10, -8(%rsi)	# ...and store it to dst
0x079: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x07b: 718e00000000000000   | 	jle S2		# if so, goto Npos:
0x084: c0f00100000000000000 | 	iaddq 1, %rax		# count++
                            | 
0x08e:                      | S2:
0x08e: 50a7f0ffffffffffffff | 	mrmovq -16(%rdi), %r10	# read val from src...
0x098: 40a6f0ffffffffffffff | 	rmmovq %r10, -16(%rsi)	# ...and store it to dst
0x0a2: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0a4: 71b700000000000000   | 	jle S3		# if so, goto Npos:
0x0ad: c0f00100000000000000 | 	iaddq 1, %rax		# count++
0x0b7:                      | S3:
0x0b7: 50a7e8ffffffffffffff | 	mrmovq -24(%rdi), %r10	# read val from src...
0x0c1: 40a6e8ffffffffffffff | 	rmmovq %r10, -24(%rsi)	# ...and store it to dst
0x0cb: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0cd: 71e000000000000000   | 	jle S4		# if so, goto Npos:
0x0d6: c0f00100000000000000 | 	iaddq 1, %rax		# count++
0x0e0:                      | S4:
0x0e0: 50a7e0ffffffffffffff | 	mrmovq -32(%rdi), %r10	# read val from src...
0x0ea: 40a6e0ffffffffffffff | 	rmmovq %r10, -32(%rsi)	# ...and store it to dst
0x0f4: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0f6: 710901000000000000   | 	jle S5		# if so, goto Npos:
0x0ff: c0f00100000000000000 | 	iaddq 1, %rax		# count++
0x109:                      | S5:
0x109: 50a7d8ffffffffffffff | 	mrmovq -40(%rdi), %r10	# read val from src...
0x113: 40a6d8ffffffffffffff | 	rmmovq %r10, -40(%rsi)	# ...and store it to dst
0x11d: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x11f: 713201000000000000   | 	jle S6		# if so, goto Npos:
0x128: c0f00100000000000000 | 	iaddq 1, %rax		# count++
0x132:                      | S6:
0x132: 50a7d0ffffffffffffff | 	mrmovq -48(%rdi), %r10	# read val from src...
0x13c: 40a6d0ffffffffffffff | 	rmmovq %r10, -48(%rsi)	# ...and store it to dst
0x146: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x148: 715b01000000000000   | 	jle S7		# if so, goto Npos:
0x151: c0f00100000000000000 | 	iaddq 1, %rax		# count++
0x15b:                      | S7:
0x15b: 50a7c8ffffffffffffff | 	mrmovq -56(%rdi), %r10	# read val from src...
0x165: 40a6c8ffffffffffffff | 	rmmovq %r10, -56(%rsi)	# ...and store it to dst
0x16f: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x171: 718401000000000000   | 	jle S8		# if so, goto Npos:
0x17a: c0f00100000000000000 | 	iaddq 1, %rax		# count++
0x184:                      | S8:
0x184: 50a7c0ffffffffffffff | 	mrmovq -64(%rdi), %r10	# read val from src...
0x18e: 40a6c0ffffffffffffff | 	rmmovq %r10, -64(%rsi)	# ...and store it to dst
0x198: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x19a: 71ad01000000000000   | 	jle Npos_8		# if so, goto Npos:
0x1a3: c0f00100000000000000 | 	iaddq 1, %rax		# count++
                            | 
                            | 
                            | 
                            | 
0x1ad:                      | Npos_8:
0x1ad: 202b                 | 	rrmovq %rdx,%r11
0x1af: c0fbf8ffffffffffffff | 	iaddq -8,%r11		# len >= 8?
0x1b9: 754700000000000000   | 	jge Sub_8			# if so, goto Loop:
                            | 
                            | 
0x1c2:                      | Check_4:
0x1c2: 202b                 | 	rrmovq %rdx,%r11
0x1c4: c0fbfcffffffffffffff | 	iaddq -4,%r11		# len < 4?
0x1ce: 729902000000000000   | 	jl Check_2			# if so, goto Check_2:
                            | 
0x1d7:                      | Sub_4:
0x1d7: c0f2fcffffffffffffff | 	iaddq -4, %rdx		# len-=8
0x1e1: c0f72000000000000000 | 	iaddq $0x20, %rdi		# src+=8*8
0x1eb: c0f62000000000000000 | 	iaddq $0x20, %rsi		# dst+=8*8
                            | 
0x1f5:                      | S4_1:
0x1f5: 50a7f8ffffffffffffff | 	mrmovq -8(%rdi), %r10	# read val from src...
0x1ff: 40a6f8ffffffffffffff | 	rmmovq %r10, -8(%rsi)	# ...and store it to dst
0x209: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x20b: 711e02000000000000   | 	jle S4_2		# if so, goto Npos:
0x214: c0f00100000000000000 | 	iaddq 1, %rax		# count++
                            | 
0x21e:                      | S4_2:
0x21e: 50a7f0ffffffffffffff | 	mrmovq -16(%rdi), %r10	# read val from src...
0x228: 40a6f0ffffffffffffff | 	rmmovq %r10, -16(%rsi)	# ...and store it to dst
0x232: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x234: 714702000000000000   | 	jle S4_3		# if so, goto Npos:
0x23d: c0f00100000000000000 | 	iaddq 1, %rax		# count++
0x247:                      | S4_3:
0x247: 50a7e8ffffffffffffff | 	mrmovq -24(%rdi), %r10	# read val from src...
0x251: 40a6e8ffffffffffffff | 	rmmovq %r10, -24(%rsi)	# ...and store it to dst
0x25b: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x25d: 717002000000000000   | 	jle S4_4		# if so, goto Npos:
0x266: c0f00100000000000000 | 	iaddq 1, %rax		# count++
0x270:                      | S4_4:
0x270: 50a7e0ffffffffffffff | 	mrmovq -32(%rdi), %r10	# read val from src...
0x27a: 40a6e0ffffffffffffff | 	rmmovq %r10, -32(%rsi)	# ...and store it to dst
0x284: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x286: 719902000000000000   | 	jle Check_2		# if so, goto Npos:
0x28f: c0f00100000000000000 | 	iaddq 1, %rax		# count++
                            | 
0x299:                      | Check_2:
0x299: 202b                 | 	rrmovq %rdx,%r11
0x29b: c0fbfeffffffffffffff | 	iaddq -2,%r11		# len < 2?
0x2a5: 721e03000000000000   | 	jl Final			# if so, goto Check_2:
                            | 
0x2ae:                      | Sub_2:
0x2ae: c0f71000000000000000 | 	iaddq $0x10, %rdi		# src+=8*8
0x2b8: c0f61000000000000000 | 	iaddq $0x10, %rsi		# dst+=8*8
0x2c2: c0f2feffffffffffffff | 	iaddq -2, %rdx		# len-=8
                            | 
                            | 
0x2cc:                      | S2_1:
0x2cc: 50a7f8ffffffffffffff | 	mrmovq -8(%rdi), %r10	# read val from src...
0x2d6: 40a6f8ffffffffffffff | 	rmmovq %r10, -8(%rsi)	# ...and store it to dst
0x2e0: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x2e2: 71f502000000000000   | 	jle S2_2		# if so, goto Npos:
0x2eb: c0f00100000000000000 | 	iaddq 1, %rax		# count++
                            | 
0x2f5:                      | S2_2:
0x2f5: 50a7f0ffffffffffffff | 	mrmovq -16(%rdi), %r10	# read val from src...
0x2ff: 40a6f0ffffffffffffff | 	rmmovq %r10, -16(%rsi)	# ...and store it to dst
0x309: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x30b: 711e03000000000000   | 	jle Final		# if so, goto Npos:
0x314: c0f00100000000000000 | 	iaddq 1, %rax		# count++
                            | 
0x31e:                      | Final:
0x31e: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x320: 715203000000000000   | 	jle Done		# if so, goto Done:
0x329: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x333: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x33d: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x33f: 715203000000000000   | 	jle Done		# if so, goto Npos:
0x348: c0f00100000000000000 | 	iaddq 1, %rax		# count++
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x352:                      | Done:
0x352: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x353:                      | End:
                            | #/* $end ncopy-ys */EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x358:                      | 	.align 8
0x358:                      | src:
0x358: ffffffffffffffff     | 	.quad -1
0x360: feffffffffffffff     | 	.quad -2
0x368: 0300000000000000     | 	.quad 3
0x370: 0400000000000000     | 	.quad 4
0x378: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x380:                      | 	.align 16
0x380:                      | Predest:
0x380: fadebc0000000000     | 	.quad 0xbcdefa
0x388:                      | dest:
0x388: abefcd0000000000     | 	.quad 0xcdefab
0x390: abefcd0000000000     | 	.quad 0xcdefab
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8:                      | Postdest:
0x3a8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3b0:                      | .align 8
                            | # Run time stack
0x3b0: 0000000000000000     | 	.quad 0
0x3b8: 0000000000000000     | 	.quad 0
0x3c0: 0000000000000000     | 	.quad 0
0x3c8: 0000000000000000     | 	.quad 0
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
                            | 
0x430:                      | Stack:
