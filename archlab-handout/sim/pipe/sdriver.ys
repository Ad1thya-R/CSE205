#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# name = Adithya Ravichandran
# id = adithya.ravichandran
# Describe how and why you modified the baseline code.
# Loop unrolling helps us improve the efficiency. (less comparisons)
# Instead of using resgisters, we use the iadddq function. (less operations)
# We also read and write the elements together in the loops. (use of separate ALU's)
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	rrmovq %rdx,%r11
	iaddq -8,%r11  # <2 ?
	jl Check_4		# if so, goto Loop2:

Sub_8:
	iaddq -8, %rdx		# len-=8
	iaddq $0x40, %rdi		# src+=8*8
	iaddq $0x40, %rsi		# dst+=8*8

Loop_8:
	mrmovq -8(%rdi), %r10	# read val from src...
	rmmovq %r10, -8(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle S2		# if so, goto Npos:
	iaddq 1, %rax		# count++

S2:
	mrmovq -16(%rdi), %r10	# read val from src...
	rmmovq %r10, -16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle S3		# if so, goto Npos:
	iaddq 1, %rax		# count++
S3:
	mrmovq -24(%rdi), %r10	# read val from src...
	rmmovq %r10, -24(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle S4		# if so, goto Npos:
	iaddq 1, %rax		# count++
S4:
	mrmovq -32(%rdi), %r10	# read val from src...
	rmmovq %r10, -32(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle S5		# if so, goto Npos:
	iaddq 1, %rax		# count++
S5:
	mrmovq -40(%rdi), %r10	# read val from src...
	rmmovq %r10, -40(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle S6		# if so, goto Npos:
	iaddq 1, %rax		# count++
S6:
	mrmovq -48(%rdi), %r10	# read val from src...
	rmmovq %r10, -48(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle S7		# if so, goto Npos:
	iaddq 1, %rax		# count++
S7:
	mrmovq -56(%rdi), %r10	# read val from src...
	rmmovq %r10, -56(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle S8		# if so, goto Npos:
	iaddq 1, %rax		# count++
S8:
	mrmovq -64(%rdi), %r10	# read val from src...
	rmmovq %r10, -64(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos_8		# if so, goto Npos:
	iaddq 1, %rax		# count++




Npos_8:
	rrmovq %rdx,%r11
	iaddq -8,%r11		# len >= 8?
	jge Sub_8			# if so, goto Loop:


Check_4:
	rrmovq %rdx,%r11
	iaddq -4,%r11		# len < 4?
	jl Check_2			# if so, goto Check_2:

Sub_4:
	iaddq -4, %rdx		# len-=8
	iaddq $0x20, %rdi		# src+=8*8
	iaddq $0x20, %rsi		# dst+=8*8

S4_1:
	mrmovq -8(%rdi), %r10	# read val from src...
	rmmovq %r10, -8(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle S4_2		# if so, goto Npos:
	iaddq 1, %rax		# count++

S4_2:
	mrmovq -16(%rdi), %r10	# read val from src...
	rmmovq %r10, -16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle S4_3		# if so, goto Npos:
	iaddq 1, %rax		# count++
S4_3:
	mrmovq -24(%rdi), %r10	# read val from src...
	rmmovq %r10, -24(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle S4_4		# if so, goto Npos:
	iaddq 1, %rax		# count++
S4_4:
	mrmovq -32(%rdi), %r10	# read val from src...
	rmmovq %r10, -32(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Check_2		# if so, goto Npos:
	iaddq 1, %rax		# count++

Check_2:
	rrmovq %rdx,%r11
	iaddq -2,%r11		# len < 2?
	jl Final			# if so, goto Check_2:

Sub_2:
	iaddq $0x10, %rdi		# src+=8*8
	iaddq $0x10, %rsi		# dst+=8*8
	iaddq -2, %rdx		# len-=8


S2_1:
	mrmovq -8(%rdi), %r10	# read val from src...
	rmmovq %r10, -8(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle S2_2		# if so, goto Npos:
	iaddq 1, %rax		# count++

S2_2:
	mrmovq -16(%rdi), %r10	# read val from src...
	rmmovq %r10, -16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Final		# if so, goto Npos:
	iaddq 1, %rax		# count++

Final:
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Done		# if so, goto Npos:
	iaddq 1, %rax		# count++


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
